// Autogenerated from Beacon (v1.3.0), do not edit directly.
// 此文件由 Beacon (v1.3.0) 自动生成，请勿修改.
// See also: https://bitbucket.org/gatebackend/lib_beacon

package com.previewplay.preview_play

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
import cn.xiaoman.library.android.snappy.Snappy

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is SnappyApiError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class SnappyApiError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/**
 *  from Beacon that represents data sent in messages.
 * 由 Beacon 生成，用于 原生侧 调用 Flutter.
 */
data class SnappyData (
  val data: ByteArray? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): SnappyData {
      val data = list[0] as ByteArray?
      return SnappyData(data)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      data,
    )
  }
}

/**
 *  from Beacon that represents data sent in messages.
 * 由 Beacon 生成，用于 原生侧 调用 Flutter.
 */
data class SnappyResult (
  val data: ByteArray? = null,
  val success: Boolean,
  val errorMessage: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): SnappyResult {
      val data = list[0] as ByteArray?
      val success = list[1] as Boolean
      val errorMessage = list[2] as String?
      return SnappyResult(data, success, errorMessage)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      data,
      success,
      errorMessage,
    )
  }
}

/**
 *  from Beacon that represents data sent in messages.
 * 由 Beacon 生成，用于 原生侧 调用 Flutter.
 */
data class SnappyValidationResult (
  val isValid: Boolean,
  val errorMessage: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): SnappyValidationResult {
      val isValid = list[0] as Boolean
      val errorMessage = list[1] as String?
      return SnappyValidationResult(isValid, errorMessage)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      isValid,
      errorMessage,
    )
  }
}

/**
 *  from Beacon that represents data sent in messages.
 * 由 Beacon 生成，用于 原生侧 调用 Flutter.
 */
data class SnappyLengthResult (
  val length: Long,
  val success: Boolean,
  val errorMessage: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): SnappyLengthResult {
      val length = list[0].let { if (it is Int) it.toLong() else it as Long }
      val success = list[1] as Boolean
      val errorMessage = list[2] as String?
      return SnappyLengthResult(length, success, errorMessage)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      length,
      success,
      errorMessage,
    )
  }
}
@Suppress("UNCHECKED_CAST")
private object SnappyApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SnappyData.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SnappyLengthResult.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SnappyResult.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SnappyValidationResult.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is SnappyData -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is SnappyLengthResult -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is SnappyResult -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is SnappyValidationResult -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/**
 * Generated interface from Beacon that represents a handler of messages from Flutter.
 * 由 Beacon 生成，用于 Flutter 调用 原生侧
 */
interface SnappyApi {
  fun compress(data: SnappyData): SnappyResult {
    try {
      val compressed = Snappy.compress(data.data)
      return SnappyResult(compressed, true, null)
    } catch (e: Exception) {
      return SnappyResult(null, false, e.message)
    }
  }
  fun uncompress(data: SnappyData): SnappyResult {
    try {
      val uncompressed = Snappy.uncompress(data.data)
      return SnappyResult(uncompressed, true, null)
    } catch (e: Exception) {
      return SnappyResult(null, false, e.message)
    }
  }
  fun maxCompressedLength(sourceLength: Long): SnappyLengthResult {
    try {
      val maxLength = Snappy.maxCompressedLength(sourceLength.toInt())
      return SnappyLengthResult(maxLength.toLong(), true, null)
    } catch (e: Exception) {
      return SnappyLengthResult(0, false, e.message)
    }
  }
  fun isValidCompressedBuffer(data: SnappyData): SnappyValidationResult {
    try {
      val isValid = Snappy.isValidCompressedBuffer(data.data)
      return SnappyValidationResult(isValid, null)
    } catch (e: Exception) {
      return SnappyValidationResult(false, e.message)
    }
  }

  companion object {
    /** The codec used by SnappyApi. */
    val codec: MessageCodec<Any?> by lazy {
      SnappyApiCodec
    }
    /** Sets up an instance of `SnappyApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: SnappyApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "com.gateio.beacon.preview_play.SnappyApi.compress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val dataArg = args[0] as SnappyData
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.compress(dataArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "com.gateio.beacon.preview_play.SnappyApi.uncompress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val dataArg = args[0] as SnappyData
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.uncompress(dataArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "com.gateio.beacon.preview_play.SnappyApi.maxCompressedLength", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val sourceLengthArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.maxCompressedLength(sourceLengthArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "com.gateio.beacon.preview_play.SnappyApi.isValidCompressedBuffer", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val dataArg = args[0] as SnappyData
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.isValidCompressedBuffer(dataArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
